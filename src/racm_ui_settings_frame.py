"""Subclass of SettingsFrame, which is generated by wxFormBuilder."""

import wx
import os.path
import platform
import racm_ui


# Implementing SettingsFrame
class SettingsFrame(racm_ui.SettingsFrame):
    _main_frame = None
    _config = None

    def __init__(self, parent, config):
        racm_ui.SettingsFrame.__init__(self, parent)
        default_dir = config.get("adb.path")
        if default_dir is "":
            if platform.system() is "Windows":
                default_dir = "%USERHOME%\AppData\Local\Android\sdk\platform-tools"
            elif platform.system() is "Darwin":
                default_dir = "~/Library/Android/sdk/platform-tools"
            else:
                default_dir = "~/"
        self._main_frame = parent
        self._config = config
        self.adb_file_picker.SetInitialDirectory(default_dir)
        self.adb_file_picker.SetPath(config.get("adb.path"))
        self.custom1_label.SetValue(config.get("custom1.label"))
        self.custom2_label.SetValue(config.get("custom2.label"))
        self.custom3_label.SetValue(config.get("custom3.label"))
        self.custom1_enable.Set3StateValue(int(config.get_3s("custom1.enable")))
        self.custom2_enable.Set3StateValue(int(config.get_3s("custom2.enable")))
        self.custom3_enable.Set3StateValue(int(config.get_3s("custom3.enable")))
        self.custom1_command.SetValue(config.get("custom1.command"))
        self.custom2_command.SetValue(config.get("custom2.command"))
        self.custom3_command.SetValue(config.get("custom3.command"))
        self.custom1_command.Enable(self.custom1_enable.IsChecked())
        self.custom2_command.Enable(self.custom2_enable.IsChecked())
        self.custom3_command.Enable(self.custom3_enable.IsChecked())

    def _show_error(self, message):
        dialog = wx.MessageDialog(None, message, self.Title, wx.OK | wx.ICON_WARNING)
        dialog.ShowModal()
        dialog.Destroy()

    def _show_missing_error(self, value_type):
        self._show_error("Please input the " + value_type + ".")

    # Handlers for SettingsFrame events.
    def on_adb_path_changed(self, event):
        pass

    def on_custom1_enable_changed(self, event):
        self.custom1_command.Enable(self.custom1_enable.IsChecked())

    def on_custom2_enable_changed(self, event):
        self.custom2_command.Enable(self.custom2_enable.IsChecked())

    def on_custom3_enable_changed(self, event):
        self.custom3_command.Enable(self.custom3_enable.IsChecked())

    def on_cancel_clicked(self, event):
        self.Destroy()

    def on_ok_clicked(self, event):
        adb_path = self.adb_file_picker.GetPath()
        if adb_path is None:
            self._show_missing_error("ADB path")
            return
        if not os.path.exists(adb_path):
            self._show_error("Specified path is not exist: " + adb_path)
            return
        if not os.path.isfile(adb_path):
            self._show_error("Specified path is not a file: " + adb_path)
            return
        self._config.set("adb.path", self.adb_file_picker.GetPath())
        self._config.set("custom1.label", self.custom1_label.GetValue())
        self._config.set("custom2.label", self.custom2_label.GetValue())
        self._config.set("custom3.label", self.custom3_label.GetValue())
        self._config.set_3s("custom1.enable", self.custom1_enable.IsChecked())
        self._config.set_3s("custom2.enable", self.custom2_enable.IsChecked())
        self._config.set_3s("custom3.enable", self.custom3_enable.IsChecked())
        self._config.set("custom1.command", self.custom1_command.GetValue())
        self._config.set("custom2.command", self.custom2_command.GetValue())
        self._config.set("custom3.command", self.custom3_command.GetValue())
        if not self._config.write():
            self._show_error("Failed to update configuration file: " + self._config.get_config_path())
            return
        self._main_frame.apply_config()
        self.Destroy()
